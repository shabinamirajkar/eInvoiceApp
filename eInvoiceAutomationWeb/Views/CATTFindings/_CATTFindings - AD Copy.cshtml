@*Shared Editable CATT Details view*@
@using System.Collections
@using Kendo.Mvc.UI

@model eInvoiceAutomationWeb.ViewModels.CATTFindingsViewModel

<html>
<head>
    <title></title>
    @Styles.Render("~/Content/kendo/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/kendo")

    <!--This CSS entry was added by the Telerik VS Extensions for compatibility reasons-->
    <link href="@Url.Content("~/Content/kendo.compatibility.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.3.1316/kendo.common.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.3.1316/kendo.mobile.all.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.3.1316/kendo.dataviz.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.3.1316/kendo.default.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.3.1316/kendo.dataviz.default.min.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/kendo/2014.3.1316/kendo.all.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2014.3.1316/kendo.aspnetmvc.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2014.3.1316/kendo.web.min.js")"></script>
    <link href="@Url.Content("~/Content/Custom.css")" rel="stylesheet" type="text/css" />

</head>

<body>

    <div class="container-fluid border-box-sizing">
        <div class="row" style="width:100%">
            <div class="col-sm-12">

            </div>
        </div>

        @if (Model != null && Model.RoutingDetails != null)
        {
            <div class="row" id="invoiceDetailTable">
                <div class="col-sm-12">
                    @Html.Partial("~/Views/Shared/_InvoiceDetailsReadOnly.cshtml", Model.RoutingDetails)
                </div>
            </div>
        }
    </div>

    @Html.Label("Recommendations/Results", new { @class = "thick" })

    <div class="container-fluid border-box-sizing" style="width:82%">
        <div class="row">
            <div class="col-sm-12" style="border:thin solid lightgray; font-size:80%; font-family: Verdana, Arial, Sans-Serif;margin:5px 0px 20px 15px;width:97%">
                <div style="height:5px;"></div>
                <div class="row">
                    <div class="col-sm-4">
                        @Html.Label("Asset: Total adjustment of: ", new { @class = "thick" })
                        @if (Model.LoggedinUserType == "CATT")
                        {
                             @*<input type="text" id="txtCATTTotalAdjustment" size="12" value=@Model.InvoiceCATTFindings.CATTRecommendedAdjustment class="custom-input">*@
                                @(Html.Kendo().NumericTextBox<decimal>()
                                                            .Name("txtCATTTotalAdjustment")
                                                            .Format("c")
                                                            .Min(0)
                                                            .Value(Model.InvoiceCATTFindings.CATTRecommendedAdjustment)
                                                            .Events(e => e.Change("onCATTTotalAdjustmentChange"))
                                )
                            
                        }
                        else
                        {
                            <label for="LBLCATTAdjust" class="normal">@Model.InvoiceCATTFindings.CATTRecommendedAdjustment.Value</label>
                            <input type="text" id="txtCATTTotalAdjustment" hidden="hidden" value=@Model.InvoiceCATTFindings.CATTRecommendedAdjustment>
                        }
                        </div>
                        <div class="col-sm-5">
                            @Html.Label("for a Payment of: ", new { @class = "thick" })
                            $
                            <input type="text" id="txtInvoiceAmt" hidden="hidden" value=@Model.RoutingDetails.InvoiceDetails.InvoiceAmount>
                            <label for="LBLAssetPaymentof" class="normal">@Model.AssetPayment </label>
                       </div>
                </div>
                <div style="height:5px;"></div>
                <div class="row">
                    <div class="col-sm-4" >
                        <span style="margin-right:14px"> @Html.Label("Approved adjustment of: ", new { @class = "thick" })</span>
                        @if (Model.LoggedinUserType == "CA")
                        {
                            @*<input type="text" id="txtCAApprovedAdjustment" size="12"  value=@Model.InvoiceCATTFindings.CARecommendedAdjustment class="custom-input">*@
                            @(Html.Kendo().NumericTextBox<decimal>()
                                                            .Name("txtCAApprovedAdjustment")
                                                            .Format("c")
                                                            .Min(0)
                                                            .Value(Model.InvoiceCATTFindings.CARecommendedAdjustment)
                                                            .Events(e => e.Change("onCAApprovedAdjustmentChange"))
                            )
                        }
                        else
                        {
                            <label for="LBLCAAdjust" class="normal">$@Model.InvoiceCATTFindings.CARecommendedAdjustment.Value</label>
                            <input type="text" id="txtCAApprovedAdjustment" hidden="hidden" value=@Model.InvoiceCATTFindings.CARecommendedAdjustment>
                        }
                        </div>
                      <div class="col-sm-5">
                       @Html.Label("for a Payment of: ", new { @class = "thick" })
                       $
                       <label for="LBLApprovedPaymentof" class="normal">@Model.ApprovedPayment</label>
                    </div>
                </div>
                <div style="height:5px;"></div>
            </div>
        </div>
    </div>

    <div class="container-fluid border-box-sizing" style="width:82%">
        <div class="row">
            <div class="col-sm-12" style="border:thin solid lightgray; font-size:80%; font-family: Verdana, Arial, Sans-Serif;margin:5px 0px 20px 15px;width:97%">
                <div style="height:5px;"></div>
                <div class="row">
                    <div class="col-sm-1">
                        @Html.Label("To: ", new { @class = "thick" })
                    </div>
                    <div class="col-sm-3">
                        <input type="text" id="txtTOCAUserID" hidden="hidden">
                        @(Html.Kendo().MultiSelect()
                 .Name("TOCAUserID").HtmlAttributes(new { @Style = "font-size:12px;" })
                .DataValueField("ApproverUserID")
                .DataTextField("ApproverName")
                .Filter("contains")
                .MinLength(1)
                .Delay(10)
                .IgnoreCase(true)
                .Value(Model.ToCA)
                .Events(e => e.Change("onTOCAUserIDChange"))
                    .DataSource(source =>
                    {
                        source.Read(read =>
                         {
                             read.Action("FetchApprovers", "CATTFindings");//.Data("onCATTAdditionalData");
                         });
                    })
                        )

                    </div>
                    <div class="col-sm-1">
                        @Html.Label("Date:", new { @class = "thick" })
                    </div>
                    <div class="col-sm-3">
                        @(Html.Kendo().DatePicker()
                            .Value(Model.DateSubmit)
                            .Name("DatepickerSubmitDate")
                            .HtmlAttributes(new { style = "width:150px" }))
                    </div>
                </div>
                <div style="height:5px;"></div>
                <div class="row">
                    <div class="col-sm-1">
                        @Html.Label("From:", new { @class = "thick" })
                    </div>
                    <div class="col-sm-3">
                        <input type="text" id="txtFROMCATTUserID" hidden="hidden">
                        @(Html.Kendo().MultiSelect()
                           .Name("FROMCATTUserID").HtmlAttributes(new { @Style = "font-size:12px;" })
                           .DataValueField("ApproverUserID")
                           .DataTextField("ApproverName")
                           .Filter("contains")
                           .MinLength(1)
                                // .ItemTemplate("cssClass='k-button'")
                           .Delay(10)
                           .IgnoreCase(true)
                           .Value(Model.FromCATT)
                           .Events(e => e.Change("onFROMCATTUserIDChange"))
                           .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("FetchApprovers", "CATTFindings");//.Data("onCATTAdditionalData");
                                });
                            })
                        )
                    </div>
                    <div class="col-sm-1">

                    </div>
                    <div class="col-sm-3">

                    </div>
                </div>
                <div style="height:5px;"></div>
            </div>
        </div>
    </div>

    <div class="row">
            <div class="col-sm-12">
                @Html.Label("Contract Attest Notes:", new { @class = "thick" })
            </div>
    </div>
    
    

    <div class="row">
            <div class="col-sm-12">
                @if (Model.LoggedinUserType == "CATT")
                {
                    <textarea id="CATTNotes" style="width: 700px; height:100px" class="custom-input" maxlength="1000">@Model.InvoiceCATTFindings.CATTNotes</textarea>
                }
                else
                {
                    <label for="LBLCATTNotes" class="normal">@Model.InvoiceCATTFindings.CATTNotes</label>
                    <textarea id="CATTNotes" hidden="hidden" maxlength="1000">@Model.InvoiceCATTFindings.CATTNotes</textarea>
                }
            </div>
         </div>

    <div class="row">
        <div class="col-sm-12" style="height:6px;"></div>
    </div>

    <div class="row">
        <div class="col-sm-12" style="width:80%">
            @if (Model.LoggedinUserType == "CATT")
            {
                @(Html.Kendo().Grid<eInvoiceApplication.DomainModel.InvoiceCATTFindingsEmp>()
                        .Name("CATTFindingsEmpGrid")
                        .Columns(columns =>
                         {
                             columns.Bound(p => p.InvoiceCATTFindingsEmpID).Title("InvoiceCATTFindingsEmpID").Visible(false);
                             columns.Bound(p => p.InvoiceCATTFindingsID).Title("InvoiceCATTFindingsID").Visible(false);
                             columns.Bound(p => p.EmployeeUserID).Title("Employee Name").Width("19%").EditorTemplateName("_EmployeeName").ClientTemplate("#: EmployeeName #");
                             columns.Bound(p => p.Classification).Title("Classification").Width("15%");
                             columns.Bound(p => p.InvoiceRate).Title("Inv Rates").Width("10%")
                                  .ClientTemplate("#= kendo.format('{0:c}',InvoiceRate) #")
                                  .ClientFooterTemplate("<div>Total:</div>");
                             columns.Bound(p => p.ApprovedRate).Title("Approved Rate").Width("10%")
                                 .ClientTemplate("#= kendo.format('{0:c}',ApprovedRate) #");
                             columns.Bound(p => p.RateVariance).Title("Rate Variance").Width("5%")
                             .ClientTemplate("#= kendo.format('{0:c}',RateVariance) #")
                             .ClientFooterTemplate("<div>#= kendo.format('{0:c}',window.calcRateVarianceTotal()) #</div>");
                             columns.Bound(p => p.InvoiceHours).Title("Invoice Hours").Width("10%")
                                  .ClientFooterTemplate("<div>Total:</div>");
                             columns.Bound(p => p.ApprovedHours).Title("Approved Hours").Width("10%");
                             columns.Bound(p => p.VarianceHours).Title("Variance Hours").Width("10%")
                                  .ClientFooterTemplate("<div>#= window.calcVarianceHoursTotal() #</div>");
                             columns.Command(command => { command.Destroy(); });
                         })
                            .ToolBar(toolbar => toolbar.Create())
                            //.ToolBar(toolbar => toolbar.Save())
                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                            .Sortable()
                          //  .Events(e => e.Edit("onCATTFindingsEmpGridEdit"))
                            .Pageable()
                            .Navigatable()
                            .AutoBind(true)
                            .DataSource(dataSource =>
                                         dataSource.Ajax()
                                        .AutoSync(true)
                                        //     .Events(e => e.Change("onDataSourceChange"))
                                           
                                        .PageSize(10)
                                        .Batch(true)
                                        .Model(model =>
                                            {
                                                model.Id(p => p.InvoiceCATTFindingsEmpID);
                                                model.Field(p => p.RateVariance).Editable(false);
                                                model.Field(p => p.VarianceHours).Editable(false);
                                            })
                                .Create(update => update.Action("CATTFindingsEmp_Create", "CATTFindings"))
                                .Read(read => read.Action("CATTFindingsEmp_Read", "CATTFindings"))
                                .Update(update => update.Action("CATTFindingsEmp_Update", "CATTFindings"))
                                .Destroy(update => update.Action("CATTFindingsEmp_Destroy", "CATTFindings"))
                                )
                )
            }
            else
            {
                @Html.Partial("~/Views/CATTFindings/_CATTFindingsEmpGridReadOnly.cshtml", Model)
            }
        </div>

         </div>

    <div class="row">
        <div class="col-sm-12" style="height:12px;"></div>
    </div>

    <div class="row">
                <div class="col-sm-12">
                    @Html.Label("Contracts Administrator Notes:", new { @class = "thick" })
                </div>
                </div>

    <div class="row">
        <div class="col-sm-12">
            @if (Model.LoggedinUserType == "CA")
            {
                <textarea id="CANotes" style="width: 700px; height:100px" class="custom-input" maxlength="1000">@Model.InvoiceCATTFindings.CANotes</textarea>
            }
            else
            {
                <label for="LBLCANotes" class="normal">@Model.InvoiceCATTFindings.CANotes</label>
                <textarea id="CANotes" hidden="hidden" maxlength="1000">@Model.InvoiceCATTFindings.CANotes</textarea>
            }

        </div>
    </div>

    <script type="text/javascript">

        $(document).ready(function () {

            //Allow Max character of 16, for CATT and CA Adjust, defined decimal (18,2) in DB, to prevent Overflow.
            $("input[data-role='numerictextbox']").attr('maxlength', '16');

            //setting width of Numeric TextBox 
            if ($("#txtCATTTotalAdjustment").data("kendoNumericTextBox") != undefined)
                $("#txtCATTTotalAdjustment").data("kendoNumericTextBox").wrapper.width(130);

            if ($("#txtCAApprovedAdjustment").data("kendoNumericTextBox") != undefined)
                $("#txtCAApprovedAdjustment").data("kendoNumericTextBox").wrapper.width(130);
        });

        //$(document).ready(function () {
        //    window.onbeforeunload = function (e) {
        //        alert('Please Enter Value for Total Adjustment');
        //        //if ($("#txtTotalAdjustment").val() == null && $("#txtTotalAdjustment").val() == '') {
        //        //    alert('Please Enter Value for Total Adjustment');
        //        //    ($("#txtTotalAdjustment").focus());
        //        //    e.preventDefault();
        //        //}
        //    }
        //});
                function calcRateVarianceTotal() {
                    var field = "RateVariance";
                    var grid = $("#CATTFindingsEmpGrid").data("kendoGrid");
                    var dataSource = grid.dataSource;
                    var newValue = 0;
                    $.each(dataSource.data(), function (index, model) {
                        newValue += model.get(field);
                    });
                    return newValue;
                }

                function calcVarianceHoursTotal() {
                    var field = "VarianceHours";
                    var grid = $("#CATTFindingsEmpGrid").data("kendoGrid");
                    var dataSource = grid.dataSource;
                    var newValue = 0;
                    $.each(dataSource.data(), function (index, model) {
                        newValue += model.get(field);
                    });
                    return newValue;
                }
                
              // var editRow; //This should be Global variable

                function onEmployeeNameChange(e) {
                    var selectedValue = $(e.sender.text());
                    var grid = $("#CATTFindingsEmpGrid").data("kendoGrid");
                    var editRow = grid.tbody.find("tr:has(.k-edit-cell)");
                    var currentDataItem = grid.dataItem(editRow);
                    if (selectedValue.selector.toString() == null)
                        currentDataItem.set("EmployeeName", "");
                    else
                        currentDataItem.set("EmployeeName", selectedValue.selector.toString());
                }
                

                ////Allow Max character of 4, for InvoiceRate and ApprovedRate, defined decimal (18,2) in DB, to prevent Overflow.
                //function onCATTFindingsEmpGridEdit(e) {
                //    e.container.find("input[name='InvoiceRate']").attr('maxlength', '4');
                //    e.container.find("input[name='ApprovedRate']").attr('maxlength', '4');
                //    e.container.find("input[name='InvoiceHours']").attr('maxlength', '4');
                //    e.container.find("input[name='ApprovedHours']").attr('maxlength', '4');
                //}

                
                //function onDataSourceChange(e) {

                //    if (e.action === "itemchange") {
                //        if (e.field === "InvoiceRate" || e.field === "ApprovedRate") {
                //            var model = e.items[0];
                //            model.set("RateVariance", model.InvoiceRate - model.ApprovedRate);
                //            model.RateVariance = model.InvoiceRate - model.ApprovedRate;
                //        }
                //        else if (e.field === "InvoiceHours" || e.field === "ApprovedHours") {
                //            var model = e.items[0];
                //            model.set("VarianceHours", model.InvoiceHours - model.ApprovedHours);
                //            model.VarianceHours = model.InvoiceHours - model.ApprovedHours;
                //        }
                //    }
                //}

                function CalculatePayment(adjustValue) {
                    var invoiceAmt = $("#txtInvoiceAmt").val()
                    return parseFloat(invoiceAmt - adjustValue).toFixed(2);
                }

                function onCATTTotalAdjustmentChange(e) {
                    if (this.value() == null || this.value() == '') {
                        this.value(0);
                    }
                    $("label[for='LBLAssetPaymentof']").html(CalculatePayment(this.value()));
                    UpdateInvoiceCATTFindings();
                }


                function onCAApprovedAdjustmentChange(e) {
                    if (this.value() == null || this.value() == '') {
                        this.value(0);
                    }
                    $("label[for='LBLApprovedPaymentof']").html(CalculatePayment(this.value()));
                    UpdateInvoiceCATTFindings();
                }


                //$("#txtCATTTotalAdjustment").focusout(function () {
                //    if ($(this).val() != null && $(this).val() != '') {
                //        $("label[for='LBLAssetPaymentof']").html(CalculatePayment($(this).val()));
                //        UpdateInvoiceCATTFindings();
                //    }
                //    else {
                //        $("#txtCATTTotalAdjustment").data("kendoNumericTextBox").value(0);
                //        $("label[for='LBLAssetPaymentof']").html(CalculatePayment($(this).val()));
                //        UpdateInvoiceCATTFindings();
                //    }
                //});

                //$("#txtCAApprovedAdjustment").focusout(function () {
                //    if ($(this).val() != null && $(this).val() != '') {
                //        $("label[for='LBLApprovedPaymentof']").html(CalculatePayment($(this).val()));
                //        UpdateInvoiceCATTFindings();
                //    }
                //    else {
                //        $("#txtCAApprovedAdjustment").data("kendoNumericTextBox").value(0);
                //        $("label[for='LBLAssetPaymentof']").html(CalculatePayment($(this).val()));
                //        UpdateInvoiceCATTFindings();
                //    }
                //});

                $("#CATTNotes").focusout(function () {
                    if ($(this).val() != null && $(this).val() != '') {
                        UpdateInvoiceCATTFindings()
                    }
                });

                $("#CANotes").focusout(function () {
                    if ($(this).val() != null && $(this).val() != '') {
                        UpdateInvoiceCATTFindings()
                    }
                });

                $("#DatepickerSubmitDate").focusout(function () {
                    if ($(this).val() != null && $(this).val() != '') {
                        UpdateInvoiceCATTFindings()
                    }
                });

                function onTOCAUserIDChange(e) {
                    if (this.value() != null || this.value() != '') {
                     // alert(this.value());
                        UpdateInvoiceCATTFindings();
                    }
                }
                
                function onFROMCATTUserIDChange(e) {
                    if (this.value() != null || this.value() != '') {
                      //  alert(this.value());
                        UpdateInvoiceCATTFindings();
                    }
                }

                function UpdateInvoiceCATTFindings() {
                    var ToCA = $("#TOCAUserID").data("kendoMultiSelect").value();
                    var FromCATT = $("#FROMCATTUserID").data("kendoMultiSelect").value();

                    //Set the Value in hidden TextBox
                    $("#txtTOCAUserID").val(ToCA);
                    $("#txtFROMCATTUserID").val(FromCATT);
                  
                    $.getJSON('@Url.Action("UpdateInvoiceCATTFindings", "CATTFindings")',
                    {
                        AddressedTo: $("#txtTOCAUserID").val(),
                        SentFrom: $("#txtFROMCATTUserID").val(),
                        Date: $("#DatepickerSubmitDate").val(),
                        CATTRecommendedAdjustment:$("#txtCATTTotalAdjustment").val(),
                        CARecommendedAdjustment: $("#txtCAApprovedAdjustment").val(),
                        CATTNotes: $("#CATTNotes").val(),
                        CANotes: $("#CANotes").val(),
                    });
                }


</script>

</body>
</html>