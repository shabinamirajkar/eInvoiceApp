using System;
using System.Data;
using SourceCode.SmartObjects.Client;
using SourceCode.Hosting.Client.BaseAPI;
using System.Text;
using System.Data.Common;
using System.IO;
using System.Xml.XPath;
using System.Configuration;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     .Net class implementation for SmartObject InvoicePODetail_SMO.
//     Changes to this file may cause incorrect behavior
// </auto-generated>
//------------------------------------------------------------------------------


namespace eInvoiceK2SAPBroker
{

    public class InvoicePODetail_SMO : InvoicePODetail_SMO_properties
    {
        #region Fields (4)

        private readonly string _connectionString;
        private SmartObject _smartObject;
        //private const string cHOST = "ROK2DEV01";
        private string cHOST = ConfigurationManager.AppSettings["K2ServerName"];
        //private const uint cPORT = 5555;
        private uint cPORT = Convert.ToUInt32(ConfigurationManager.AppSettings["K2ManagementServerPort"]);
        
        #endregion Fields

        #region Constructors (2)

        public InvoicePODetail_SMO(string connectionString)
        {
            _connectionString = connectionString;
            this.GetSmartObject();
        }
        public InvoicePODetail_SMO()
        {
            SCConnectionStringBuilder hostServerConnectionString = new SCConnectionStringBuilder();
            hostServerConnectionString.Host = cHOST;
            hostServerConnectionString.Port = cPORT;
            hostServerConnectionString.IsPrimaryLogin = true;
            hostServerConnectionString.Integrated = true;
            _connectionString = hostServerConnectionString.ConnectionString;
            this.GetSmartObject();
        }

        #endregion Constructors

        #region Methods (13)

        // Public Methods (7) 

        public InvoicePODetail_SMO_properties Create(int? InvoiceMasterID)
        {
            // Verify required properties

            if (InvoiceMasterID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceMasterID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Create";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["PONumber"], PONumber);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["POLine"], POLine);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["GLAccount"], GLAccount);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["CostCenter"], CostCenter);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["WBS"], WBS);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["Fund"], Fund);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["FunctionalArea"], FunctionalArea);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["GrantAmt"], GrantAmt);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InternalOrder"], InternalOrder);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceAmount"], InvoiceAmount);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                InvoicePODetail_SMO_properties returnProperties = GetPropertiesObject();
                returnProperties.InvoiceDetailID = SetProperty_InvoiceDetailID(returnSmartObject.Properties["InvoiceDetailID"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public InvoicePODetail_SMO_properties Read(int? InvoiceDetailID)
        {
            // Verify required properties

            if (InvoiceDetailID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceDetailID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Read";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Read"].InputProperties["InvoiceDetailID"], InvoiceDetailID);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                InvoicePODetail_SMO_properties returnProperties = GetPropertiesObject();
                returnProperties.InvoiceDetailID = SetProperty_InvoiceDetailID(returnSmartObject.Properties["InvoiceDetailID"].Value);
                returnProperties.InvoiceMasterID = SetProperty_InvoiceMasterID(returnSmartObject.Properties["InvoiceMasterID"].Value);
                returnProperties.PONumber = SetProperty_PONumber(returnSmartObject.Properties["PONumber"].Value);
                returnProperties.POLine = SetProperty_POLine(returnSmartObject.Properties["POLine"].Value);
                returnProperties.GLAccount = SetProperty_GLAccount(returnSmartObject.Properties["GLAccount"].Value);
                returnProperties.CostCenter = SetProperty_CostCenter(returnSmartObject.Properties["CostCenter"].Value);
                returnProperties.WBS = SetProperty_WBS(returnSmartObject.Properties["WBS"].Value);
                returnProperties.Fund = SetProperty_Fund(returnSmartObject.Properties["Fund"].Value);
                returnProperties.FunctionalArea = SetProperty_FunctionalArea(returnSmartObject.Properties["FunctionalArea"].Value);
                returnProperties.GrantAmt = SetProperty_GrantAmt(returnSmartObject.Properties["GrantAmt"].Value);
                returnProperties.InternalOrder = SetProperty_InternalOrder(returnSmartObject.Properties["InternalOrder"].Value);
                returnProperties.InvoiceAmount = SetProperty_InvoiceAmount(returnSmartObject.Properties["InvoiceAmount"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public void Update(int? InvoiceDetailID)
        {
            // Verify required properties

            if (InvoiceDetailID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceDetailID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Update";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceDetailID"], InvoiceDetailID);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["PONumber"], PONumber);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["POLine"], POLine);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["GLAccount"], GLAccount);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["CostCenter"], CostCenter);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["WBS"], WBS);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["Fund"], Fund);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["FunctionalArea"], FunctionalArea);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["GrantAmt"], GrantAmt);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InternalOrder"], InternalOrder);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceAmount"], InvoiceAmount);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public void Delete(int? InvoiceDetailID)
        {
            // Verify required properties

            if (InvoiceDetailID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceDetailID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Delete";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Delete"].InputProperties["InvoiceDetailID"], InvoiceDetailID);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public void DeleteByInvoiceMasterID(int? InvoiceMasterID)
        {
            // Verify required properties

            if (InvoiceMasterID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceMasterID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Execute";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Execute"].InputProperties["InvoiceMasterID"], InvoiceMasterID);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DataTable List()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "List";

            // Assign Input properties
            if (InvoiceDetailID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceDetailID"], InvoiceDetailID);
            }
            if (InvoiceMasterID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            }
            if (PONumber != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PONumber"], PONumber);
            }
            if (POLine != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["POLine"], POLine);
            }
            if (GLAccount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["GLAccount"], GLAccount);
            }
            if (CostCenter != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CostCenter"], CostCenter);
            }
            if (WBS != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["WBS"], WBS);
            }
            if (Fund != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Fund"], Fund);
            }
            if (FunctionalArea != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["FunctionalArea"], FunctionalArea);
            }
            if (GrantAmt != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["GrantAmt"], GrantAmt);
            }
            if (InternalOrder != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InternalOrder"], InternalOrder);
            }
            if (InvoiceAmount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceAmount"], InvoiceAmount);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListDataTable(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DbDataReader List_Reader()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "List";

            // Assign Input properties
            if (InvoiceDetailID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceDetailID"], InvoiceDetailID);
            }
            if (InvoiceMasterID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            }
            if (PONumber != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PONumber"], PONumber);
            }
            if (POLine != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["POLine"], POLine);
            }
            if (GLAccount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["GLAccount"], GLAccount);
            }
            if (CostCenter != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CostCenter"], CostCenter);
            }
            if (WBS != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["WBS"], WBS);
            }
            if (Fund != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Fund"], Fund);
            }
            if (FunctionalArea != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["FunctionalArea"], FunctionalArea);
            }
            if (GrantAmt != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["GrantAmt"], GrantAmt);
            }
            if (InternalOrder != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InternalOrder"], InternalOrder);
            }
            if (InvoiceAmount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceAmount"], InvoiceAmount);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListReader(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }


        // Private Methods (6) 

        private void ClearProperties()
        {
            foreach (SmartProperty property in _smartObject.Properties)
            {
                property.Clear();
                property.ValueBehaviour = ValueBehaviour.None;
            }
        }

        private SmartObjectClientServer CreateConnection()
        {
            SmartObjectClientServer soServer = new SmartObjectClientServer();
            soServer.CreateConnection();
            soServer.Connection.Open(_connectionString);
            return soServer;
        }

        private Exception DisplayError(Exception ex)
        {
            if (ex is SmartObjectException)
            {
                return DisplayError(ex as SmartObjectException);
            }
            else
            {
                return ex;
            }
        }

        private Exception DisplayError(SmartObjectException smartObjectException)
        {
            StringBuilder errorMessage = new StringBuilder();
            foreach (SmartObjectExceptionData smartobjectExceptionData in smartObjectException.BrokerData)
            {
                string message = smartobjectExceptionData.Message;
                string service = smartobjectExceptionData.ServiceName;
                string serviceGuid = smartobjectExceptionData.ServiceGuid;
                string severity = smartobjectExceptionData.Severity.ToString();
                string innermessage = smartobjectExceptionData.InnerExceptionMessage;
                errorMessage.AppendLine(message);
                errorMessage.AppendLine();
                errorMessage.AppendLine("Service: " + service);
                errorMessage.AppendLine("Service Guid: " + serviceGuid);
                errorMessage.AppendLine("Severity: " + severity);
                if (!string.IsNullOrEmpty(innermessage))
                {
                    errorMessage.AppendLine("InnerException Message: " + innermessage);
                }
            }
            return new Exception(errorMessage.ToString());
        }

        private void GetSmartObject()
        {
            SmartObjectClientServer clientServer = CreateConnection();
            using (clientServer.Connection)
            {
                _smartObject = clientServer.GetSmartObject("InvoicePODetail_SMO");
            }
        }

        private static void SetPropertyValue(SmartProperty smartProperty, object value)
        {
            if (value == null)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Unchanged;
                smartProperty.Value = null;
            }
            else if (value == DBNull.Value)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Clear;
                smartProperty.Value = null;
            }
            else if (value.ToString() == string.Empty)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Empty;
                smartProperty.Value = string.Empty;
            }
            else
            {
                smartProperty.ValueBehaviour = ValueBehaviour.None;
                smartProperty.Value = value.ToString();
            }
        }

        #endregion Methods
    }

    public class InvoicePODetail_SMO_properties
    {
        #region Fields (12)

        private int? _InvoiceDetailID;
        private int? _InvoiceMasterID;
        private string _PONumber;
        private int? _POLine;
        private int? _GLAccount;
        private int? _CostCenter;
        private string _WBS;
        private int? _Fund;
        private string _FunctionalArea;
        private string _GrantAmt;
        private string _InternalOrder;
        private double? _InvoiceAmount;

        #endregion Fields

        #region Constructors (1)

        protected InvoicePODetail_SMO_properties()
        {
        }

        #endregion Constructors

        #region Properties (12)

        public int? InvoiceDetailID
        {
            get
            {
                return _InvoiceDetailID;
            }
            set
            {
                _InvoiceDetailID = value;
            }
        }

        public int? InvoiceMasterID
        {
            get
            {
                return _InvoiceMasterID;
            }
            set
            {
                _InvoiceMasterID = value;
            }
        }

        public string PONumber
        {
            get
            {
                return _PONumber;
            }
            set
            {
                _PONumber = value;
            }
        }

        public int? POLine
        {
            get
            {
                return _POLine;
            }
            set
            {
                _POLine = value;
            }
        }

        public int? GLAccount
        {
            get
            {
                return _GLAccount;
            }
            set
            {
                _GLAccount = value;
            }
        }

        public int? CostCenter
        {
            get
            {
                return _CostCenter;
            }
            set
            {
                _CostCenter = value;
            }
        }

        public string WBS
        {
            get
            {
                return _WBS;
            }
            set
            {
                _WBS = value;
            }
        }

        public int? Fund
        {
            get
            {
                return _Fund;
            }
            set
            {
                _Fund = value;
            }
        }

        public string FunctionalArea
        {
            get
            {
                return _FunctionalArea;
            }
            set
            {
                _FunctionalArea = value;
            }
        }

        public string GrantAmt
        {
            get
            {
                return _GrantAmt;
            }
            set
            {
                _GrantAmt = value;
            }
        }

        public string InternalOrder
        {
            get
            {
                return _InternalOrder;
            }
            set
            {
                _InternalOrder = value;
            }
        }

        public double? InvoiceAmount
        {
            get
            {
                return _InvoiceAmount;
            }
            set
            {
                _InvoiceAmount = value;
            }
        }


        #endregion Properties

        #region Methods (13)

        // Protected Methods (13) 
        protected InvoicePODetail_SMO_properties GetPropertiesObject()
        {
            return new InvoicePODetail_SMO_properties();
        }

        protected static int? SetProperty_InvoiceDetailID(string InvoiceDetailID)
        {
            if (InvoiceDetailID == null)
            {
                return null;
            }


            if (InvoiceDetailID == string.Empty)
            {
                return null;
            }

            return int.Parse(InvoiceDetailID);
        }

        protected static int? SetProperty_InvoiceMasterID(string InvoiceMasterID)
        {
            if (InvoiceMasterID == null)
            {
                return null;
            }


            if (InvoiceMasterID == string.Empty)
            {
                return null;
            }

            return int.Parse(InvoiceMasterID);
        }

        protected static string SetProperty_PONumber(string PONumber)
        {
            if (PONumber == null)
            {
                return null;
            }


            if (PONumber == string.Empty)
            {
                return null;
            }

            return PONumber;
        }

        protected static int? SetProperty_POLine(string POLine)
        {
            if (POLine == null)
            {
                return null;
            }


            if (POLine == string.Empty)
            {
                return null;
            }

            return int.Parse(POLine);
        }

        protected static int? SetProperty_GLAccount(string GLAccount)
        {
            if (GLAccount == null)
            {
                return null;
            }


            if (GLAccount == string.Empty)
            {
                return null;
            }

            return int.Parse(GLAccount);
        }

        protected static int? SetProperty_CostCenter(string CostCenter)
        {
            if (CostCenter == null)
            {
                return null;
            }


            if (CostCenter == string.Empty)
            {
                return null;
            }

            return int.Parse(CostCenter);
        }

        protected static string SetProperty_WBS(string WBS)
        {
            if (WBS == null)
            {
                return null;
            }


            if (WBS == string.Empty)
            {
                return null;
            }

            return WBS;
        }

        protected static int? SetProperty_Fund(string Fund)
        {
            if (Fund == null)
            {
                return null;
            }


            if (Fund == string.Empty)
            {
                return null;
            }

            return int.Parse(Fund);
        }

        protected static string SetProperty_FunctionalArea(string FunctionalArea)
        {
            if (FunctionalArea == null)
            {
                return null;
            }


            if (FunctionalArea == string.Empty)
            {
                return null;
            }

            return FunctionalArea;
        }

        protected static string SetProperty_GrantAmt(string GrantAmt)
        {
            if (GrantAmt == null)
            {
                return null;
            }


            if (GrantAmt == string.Empty)
            {
                return null;
            }

            return GrantAmt;
        }

        protected static string SetProperty_InternalOrder(string InternalOrder)
        {
            if (InternalOrder == null)
            {
                return null;
            }


            if (InternalOrder == string.Empty)
            {
                return null;
            }

            return InternalOrder;
        }

        protected static double? SetProperty_InvoiceAmount(string InvoiceAmount)
        {
            if (InvoiceAmount == null)
            {
                return null;
            }


            if (InvoiceAmount == string.Empty)
            {
                return null;
            }

            return double.Parse(InvoiceAmount);
        }


        #endregion Methods

    }

    //#region Object Classes

    ////public abstract class NamedObject
    ////{

    ////    #region Fields (3)

    ////    private string _name;
    ////    private string _value;
    ////    protected const string SCNULL = "scnull";

    ////    #endregion Fields

    ////    #region Constructors (2)

    ////    public NamedObject(string name, string value)
    ////    {
    ////        _name = name;
    ////        _value = value;
    ////    }

    ////    public NamedObject(string inputValue)
    ////    {
    ////        this.FromValue(inputValue);
    ////    }

    ////    #endregion Constructors

    ////    #region Properties (2)

    ////    public string Name
    ////    {
    ////        get
    ////        {
    ////            return _name;
    ////        }
    ////        set
    ////        {
    ////            _name = value;
    ////        }
    ////    }

    ////    public string Value
    ////    {
    ////        get
    ////        {
    ////            return _value;
    ////        }
    ////        set
    ////        {
    ////            _value = value;
    ////        }
    ////    }

    ////    #endregion Properties

    ////    #region Methods (3)

    ////    // Public Methods (3) 

    ////    public abstract void FromValue(string inputValue);

    ////    public override string ToString()
    ////    {
    ////        return ToValue();
    ////    }

    ////    public abstract string ToValue();

    ////    #endregion Methods

    ////}

    ////public class ImageObject : NamedObject
    ////{

    ////    #region Constructors (2)

    ////    public ImageObject(string name, string value)
    ////        : base(name, value)
    ////    {
    ////    }

    ////    public ImageObject(string inputValue)
    ////        : base(inputValue)
    ////    {
    ////    }

    ////    #endregion Constructors

    ////    #region Methods (2)

    ////    // Public Methods (2) 
    ////    public override void FromValue(string inputValue)
    ////    {
    ////        if (!string.IsNullOrEmpty(inputValue))
    ////        {
    ////            using (StringReader reader = new StringReader(inputValue))
    ////            {
    ////                XPathDocument xDoc = new XPathDocument(reader);
    ////                XPathNavigator xNav = xDoc.CreateNavigator();
    ////                string imageNameValue = xNav.SelectSingleNode("image/name").InnerXml;
    ////                string contentValue = xNav.SelectSingleNode("image/content").InnerXml;
    ////                if (imageNameValue == SCNULL)
    ////                    this.Name = string.Empty;
    ////                else
    ////                    this.Name = imageNameValue;
    ////                if (contentValue == SCNULL)
    ////                    this.Value = string.Empty;
    ////                else
    ////                    this.Value = contentValue;
    ////            }
    ////        }
    ////        else
    ////        {
    ////            this.Value = string.Empty;
    ////            this.Name = string.Empty;
    ////        }
    ////    }

    ////    public override string ToValue()
    ////    {
    ////        StringBuilder sb = new StringBuilder();
    ////        sb.Append("<image>");
    ////        if (this.Name == null)
    ////        {
    ////            sb.Append("<name/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<name>");
    ////            sb.Append(this.Name);
    ////            sb.Append("</name>");
    ////        }
    ////        if (this.Value == null)
    ////        {
    ////            sb.Append("<content/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<content>");
    ////            sb.Append(this.Value);
    ////            sb.Append("</content>");
    ////        }
    ////        sb.Append("</image>");
    ////        return sb.ToString();
    ////    }

    ////    #endregion Methods

    ////}

    ////public class FileObject : NamedObject
    ////{

    ////    #region Constructors (2)

    ////    public FileObject(string name, string value)
    ////        : base(name, value)
    ////    {
    ////    }

    ////    public FileObject(string inputValue)
    ////        : base(inputValue)
    ////    {
    ////    }

    ////    #endregion Constructors

    ////    #region Methods (2)

    ////    // Public Methods (2) 
    ////    public override void FromValue(string inputValue)
    ////    {
    ////        if (!string.IsNullOrEmpty(inputValue))
    ////        {
    ////            using (StringReader reader = new StringReader(inputValue))
    ////            {
    ////                XPathDocument xDoc = new XPathDocument(reader);
    ////                XPathNavigator xNav = xDoc.CreateNavigator();
    ////                string fileNameValue = xNav.SelectSingleNode("file/name").InnerXml;
    ////                string contentValue = xNav.SelectSingleNode("file/content").InnerXml;
    ////                if (fileNameValue == SCNULL)
    ////                    this.Name = string.Empty;
    ////                else
    ////                    this.Name = fileNameValue;
    ////                if (contentValue == SCNULL)
    ////                    this.Value = string.Empty;
    ////                else
    ////                    this.Value = contentValue;
    ////            }
    ////        }
    ////        else
    ////        {
    ////            this.Value = string.Empty;
    ////            this.Name = string.Empty;
    ////        }
    ////    }

    ////    public override string ToValue()
    ////    {
    ////        StringBuilder sb = new StringBuilder();
    ////        sb.Append("<file>");
    ////        if (this.Name == null)
    ////        {
    ////            sb.Append("<name/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<name>");
    ////            sb.Append(this.Name);
    ////            sb.Append("</name>");
    ////        }
    ////        if (this.Value == null)
    ////        {
    ////            sb.Append("<content/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<content>");
    ////            sb.Append(this.Value);
    ////            sb.Append("</content>");
    ////        }
    ////        sb.Append("</file>");
    ////        return sb.ToString();
    ////    }

    ////    #endregion Methods

    ////}

    ////public class HyperLinkObject : NamedObject
    ////{

    ////    #region Constructors (2)

    ////    public HyperLinkObject(string name, string value)
    ////        : base(name, value)
    ////    {
    ////    }

    ////    public HyperLinkObject(string inputValue)
    ////        : base(inputValue)
    ////    {
    ////    }

    ////    #endregion Constructors

    ////    #region Methods (2)

    ////    // Public Methods (2) 

    ////    public override void FromValue(string inputValue)
    ////    {
    ////        if (!string.IsNullOrEmpty(inputValue))
    ////        {
    ////            using (StringReader reader = new StringReader(inputValue))
    ////            {
    ////                XPathDocument xDoc = new XPathDocument(reader);
    ////                XPathNavigator xNav = xDoc.CreateNavigator();
    ////                string hyperLinkNameValue = xNav.SelectSingleNode("hyperlink/display").InnerXml;
    ////                string contentValue = xNav.SelectSingleNode("hyperlink/link").InnerXml;
    ////                if (hyperLinkNameValue == SCNULL)
    ////                    this.Name = string.Empty;
    ////                else
    ////                    this.Name = hyperLinkNameValue;
    ////                if (contentValue == SCNULL)
    ////                    this.Value = string.Empty;
    ////                else
    ////                    this.Value = contentValue;
    ////            }
    ////        }
    ////        else
    ////        {
    ////            this.Value = string.Empty;
    ////            this.Name = string.Empty;
    ////        }
    ////    }

    ////    public override string ToValue()
    ////    {
    ////        StringBuilder sb = new StringBuilder();
    ////        sb.Append("<hyperlink>");
    ////        if (this.Name == null)
    ////        {
    ////            sb.Append("<link/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<link>");
    ////            sb.Append(this.Name);
    ////            sb.Append("</link>");
    ////        }
    ////        if (this.Value == null)
    ////        {
    ////            sb.Append("<display/>");
    ////        }
    ////        else
    ////        {
    ////            sb.Append("<display>");
    ////            sb.Append(this.Value);
    ////            sb.Append("</display>");
    ////        }
    ////        sb.Append("</hyperlink>");
    ////        return sb.ToString();
    ////    }

    ////    #endregion Methods

    ////}

    //#endregion
}
