using System;
using System.Data;
using SourceCode.SmartObjects.Client;
using SourceCode.Hosting.Client.BaseAPI;
using System.Text;
using System.Data.Common;
using System.IO;
using System.Xml.XPath;
using System.Configuration;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     .Net class implementation for SmartObject InvoiceMaster_SMO.
//     Changes to this file may cause incorrect behavior
// </auto-generated>
//------------------------------------------------------------------------------


namespace eInvoiceK2SAPBroker
{

    public class InvoiceMaster_SMO : InvoiceMaster_SMO_properties
    {
        #region Fields (4)

        private readonly string _connectionString;
        private SmartObject _smartObject;
        //private const string cHOST = "ROK2DEV01";
        private string cHOST = ConfigurationManager.AppSettings["K2ServerName"];
        //private const uint cPORT = 5555;
        private uint cPORT = Convert.ToUInt32(ConfigurationManager.AppSettings["K2ManagementServerPort"]);

        #endregion Fields

        #region Constructors (2)

        public InvoiceMaster_SMO(string connectionString)
        {
            _connectionString = connectionString;
            this.GetSmartObject();
        }
        public InvoiceMaster_SMO()
        {
            SCConnectionStringBuilder hostServerConnectionString = new SCConnectionStringBuilder();
            hostServerConnectionString.Host = cHOST;
            hostServerConnectionString.Port = cPORT;
            hostServerConnectionString.IsPrimaryLogin = true;
            hostServerConnectionString.Integrated = true;
            _connectionString = hostServerConnectionString.ConnectionString;
            this.GetSmartObject();
        }

        #endregion Constructors

        #region Methods (12)

        // Public Methods (6) 

        public InvoiceMaster_SMO_properties Create(string DocumentNo, string InvoiceNo)
        {
            // Verify required properties

            if (DocumentNo == null)
            {
                throw new NullReferenceException("Value required for property [DocumentNo]");
            }
            if (InvoiceNo == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceNo]");
            }
        

            // Set method to execute
            _smartObject.MethodToExecute = "Create";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["IAProcID"], IAProcID);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["DocumentNo"], DocumentNo);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceNo"], InvoiceNo);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceAmount"], InvoiceAmount);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["VendorNo"], VendorNo);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["VendorName"], VendorName);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["ContractNo"], ContractNo);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["Period"], Period);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["Project"], Project);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["PaymentDueBy"], PaymentDueBy);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["PostedParkedBy"], PostedParkedBy);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["CATTThreshold"], CATTThreshold);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["CATTApprovalRequired"], CATTApprovalRequired);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["SESNumber"], SESNumber);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["APSubmittedDate"], APSubmittedDate);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["APSubmittedByUserID"], APSubmittedByUserID);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["Status"], Status);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["DocumentType"], DocumentType);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceDate"], InvoiceDate);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["NonContractingStatus"], NonContractingStatus);
            SetPropertyValue(_smartObject.Methods["Create"].InputProperties["InvoiceType"], InvoiceType);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                InvoiceMaster_SMO_properties returnProperties = GetPropertiesObject();
                returnProperties.InvoiceMasterID = SetProperty_InvoiceMasterID(returnSmartObject.Properties["InvoiceMasterID"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public InvoiceMaster_SMO_properties Read(int? InvoiceMasterID)
        {
            // Verify required properties

            if (InvoiceMasterID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceMasterID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Read";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Read"].InputProperties["InvoiceMasterID"], InvoiceMasterID);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                InvoiceMaster_SMO_properties returnProperties = GetPropertiesObject();
                returnProperties.InvoiceMasterID = SetProperty_InvoiceMasterID(returnSmartObject.Properties["InvoiceMasterID"].Value);
                returnProperties.IAProcID = SetProperty_IAProcID(returnSmartObject.Properties["IAProcID"].Value);
                returnProperties.DocumentNo = SetProperty_DocumentNo(returnSmartObject.Properties["DocumentNo"].Value);
                returnProperties.InvoiceNo = SetProperty_InvoiceNo(returnSmartObject.Properties["InvoiceNo"].Value);
                returnProperties.InvoiceAmount = SetProperty_InvoiceAmount(returnSmartObject.Properties["InvoiceAmount"].Value);
                returnProperties.VendorNo = SetProperty_VendorNo(returnSmartObject.Properties["VendorNo"].Value);
                returnProperties.VendorName = SetProperty_VendorName(returnSmartObject.Properties["VendorName"].Value);
                returnProperties.ContractNo = SetProperty_ContractNo(returnSmartObject.Properties["ContractNo"].Value);
                returnProperties.Period = SetProperty_Period(returnSmartObject.Properties["Period"].Value);
                returnProperties.Project = SetProperty_Project(returnSmartObject.Properties["Project"].Value);
                returnProperties.PaymentDueBy = SetProperty_PaymentDueBy(returnSmartObject.Properties["PaymentDueBy"].Value);
                returnProperties.PostedParkedBy = SetProperty_PostedParkedBy(returnSmartObject.Properties["PostedParkedBy"].Value);
                returnProperties.CATTThreshold = SetProperty_CATTThreshold(returnSmartObject.Properties["CATTThreshold"].Value);
                returnProperties.CATTApprovalRequired = SetProperty_CATTApprovalRequired(returnSmartObject.Properties["CATTApprovalRequired"].Value);
                returnProperties.SESNumber = SetProperty_SESNumber(returnSmartObject.Properties["SESNumber"].Value);
                returnProperties.APSubmittedDate = SetProperty_APSubmittedDate(returnSmartObject.Properties["APSubmittedDate"].Value);
                returnProperties.APSubmittedByUserID = SetProperty_APSubmittedByUserID(returnSmartObject.Properties["APSubmittedByUserID"].Value);
                returnProperties.Status = SetProperty_Status(returnSmartObject.Properties["Status"].Value);
                returnProperties.DocumentType = SetProperty_Status(returnSmartObject.Properties["DocumentType"].Value);
                returnProperties.InvoiceDate = SetProperty_InvoiceDate(returnSmartObject.Properties["InvoiceDate"].Value);
                returnProperties.NonContractingStatus = SetProperty_NonContractingStatus(returnSmartObject.Properties["NonContractingStatus"].Value);
                returnProperties.InvoiceType = SetProperty_InvoiceType(returnSmartObject.Properties["InvoiceType"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public void Update(int? InvoiceMasterID)
        {
            // Verify required properties

            if (InvoiceMasterID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceMasterID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Update";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["IAProcID"], IAProcID);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["DocumentNo"], DocumentNo);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceNo"], InvoiceNo);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceAmount"], InvoiceAmount);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["VendorNo"], VendorNo);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["VendorName"], VendorName);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["ContractNo"], ContractNo);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["Period"], Period);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["Project"], Project);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["PaymentDueBy"], PaymentDueBy);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["PostedParkedBy"], PostedParkedBy);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["CATTThreshold"], CATTThreshold);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["CATTApprovalRequired"], CATTApprovalRequired);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["SESNumber"], SESNumber);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["APSubmittedDate"], APSubmittedDate);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["APSubmittedByUserID"], APSubmittedByUserID);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["Status"], Status);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["NonContractingStatus"], NonContractingStatus);
            SetPropertyValue(_smartObject.Methods["Update"].InputProperties["InvoiceType"], InvoiceType);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public void Delete(int? InvoiceMasterID)
        {
            // Verify required properties

            if (InvoiceMasterID == null)
            {
                throw new NullReferenceException("Value required for property [InvoiceMasterID]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "Delete";

            // Assign Input properties
            SetPropertyValue(_smartObject.Methods["Delete"].InputProperties["InvoiceMasterID"], InvoiceMasterID);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DataTable List()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "List";

            // Assign Input properties
            if (InvoiceMasterID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            }
            if (IAProcID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["IAProcID"], IAProcID);
            }
            if (DocumentNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["DocumentNo"], DocumentNo);
            }
            if (InvoiceNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceNo"], InvoiceNo);
            }
            if (InvoiceAmount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceAmount"], InvoiceAmount);
            }
            if (VendorNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["VendorNo"], VendorNo);
            }
            if (VendorName != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["VendorName"], VendorName);
            }
            if (ContractNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["ContractNo"], ContractNo);
            }
            if (Period != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Period"], Period);
            }
            if (Project != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Project"], Project);
            }
            if (PaymentDueBy != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PaymentDueBy"], PaymentDueBy);
            }
            if (PostedParkedBy != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PostedParkedBy"], PostedParkedBy);
            }
            if (CATTThreshold != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CATTThreshold"], CATTThreshold);
            }
            if (CATTApprovalRequired != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CATTApprovalRequired"], CATTApprovalRequired);
            }
            if (SESNumber != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["SESNumber"], SESNumber);
            }
            if (APSubmittedDate != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["APSubmittedDate"], APSubmittedDate);
            }
            if (APSubmittedByUserID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["APSubmittedByUserID"], APSubmittedByUserID);
            }
            if (Status != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Status"], Status);
            }
            if (NonContractingStatus != null)
                {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["NonContractingStatus"], NonContractingStatus);
                }
            if (InvoiceType != null)
                {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceType"], InvoiceType);
                }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListDataTable(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DbDataReader List_Reader()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "List";

            // Assign Input properties
            if (InvoiceMasterID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceMasterID"], InvoiceMasterID);
            }
            if (IAProcID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["IAProcID"], IAProcID);
            }
            if (DocumentNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["DocumentNo"], DocumentNo);
            }
            if (InvoiceNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceNo"], InvoiceNo);
            }
            if (InvoiceAmount != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceAmount"], InvoiceAmount);
            }
            if (VendorNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["VendorNo"], VendorNo);
            }
            if (VendorName != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["VendorName"], VendorName);
            }
            if (ContractNo != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["ContractNo"], ContractNo);
            }
            if (Period != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Period"], Period);
            }
            if (Project != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Project"], Project);
            }
            if (PaymentDueBy != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PaymentDueBy"], PaymentDueBy);
            }
            if (PostedParkedBy != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["PostedParkedBy"], PostedParkedBy);
            }
            if (CATTThreshold != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CATTThreshold"], CATTThreshold);
            }
            if (CATTApprovalRequired != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["CATTApprovalRequired"], CATTApprovalRequired);
            }
            if (SESNumber != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["SESNumber"], SESNumber);
            }
            if (APSubmittedDate != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["APSubmittedDate"], APSubmittedDate);
            }
            if (APSubmittedByUserID != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["APSubmittedByUserID"], APSubmittedByUserID);
            }
            if (Status != null)
            {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["Status"], Status);
            }

            if (NonContractingStatus != null)
                {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["NonContractingStatus"], NonContractingStatus);
                }
            if (InvoiceType != null)
                {
                SetPropertyValue(_smartObject.ListMethods["List"].InputProperties["InvoiceType"], InvoiceType);
                }
            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListReader(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }


        // Private Methods (6) 

        private void ClearProperties()
        {
            foreach (SmartProperty property in _smartObject.Properties)
            {
                property.Clear();
                property.ValueBehaviour = ValueBehaviour.None;
            }
        }

        private SmartObjectClientServer CreateConnection()
        {
            SmartObjectClientServer soServer = new SmartObjectClientServer();
            soServer.CreateConnection();
            soServer.Connection.Open(_connectionString);
            return soServer;
        }

        private Exception DisplayError(Exception ex)
        {
            if (ex is SmartObjectException)
            {
                return DisplayError(ex as SmartObjectException);
            }
            else
            {
                return ex;
            }
        }

        private Exception DisplayError(SmartObjectException smartObjectException)
        {
            StringBuilder errorMessage = new StringBuilder();
            foreach (SmartObjectExceptionData smartobjectExceptionData in smartObjectException.BrokerData)
            {
                string message = smartobjectExceptionData.Message;
                string service = smartobjectExceptionData.ServiceName;
                string serviceGuid = smartobjectExceptionData.ServiceGuid;
                string severity = smartobjectExceptionData.Severity.ToString();
                string innermessage = smartobjectExceptionData.InnerExceptionMessage;
                errorMessage.AppendLine(message);
                errorMessage.AppendLine();
                errorMessage.AppendLine("Service: " + service);
                errorMessage.AppendLine("Service Guid: " + serviceGuid);
                errorMessage.AppendLine("Severity: " + severity);
                if (!string.IsNullOrEmpty(innermessage))
                {
                    errorMessage.AppendLine("InnerException Message: " + innermessage);
                }
            }
            return new Exception(errorMessage.ToString());
        }

        private void GetSmartObject()
        {
            SmartObjectClientServer clientServer = CreateConnection();
            using (clientServer.Connection)
            {
                _smartObject = clientServer.GetSmartObject("InvoiceMaster_SMO");
            }
        }

        private static void SetPropertyValue(SmartProperty smartProperty, object value)
        {
            if (value == null)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Unchanged;
                smartProperty.Value = null;
            }
            else if (value == DBNull.Value)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Clear;
                smartProperty.Value = null;
            }
            else if (value.ToString() == string.Empty)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Empty;
                smartProperty.Value = string.Empty;
            }
            else
            {
                smartProperty.ValueBehaviour = ValueBehaviour.None;
                smartProperty.Value = value.ToString();
            }
        }

        #endregion Methods

    }

    public class InvoiceMaster_SMO_properties
    {
        #region Fields (18)

        private int? _InvoiceMasterID;
        private int? _IAProcID;
        private string _DocumentNo;
        private string _InvoiceNo;
        private double? _InvoiceAmount;
        private string _VendorNo;
        private string _VendorName;
        private string _ContractNo;
        private string _Period;
        private string _Project;
        private DateTime? _PaymentDueBy;
        private string _PostedParkedBy;
        private int? _CATTThreshold;
        private bool? _CATTApprovalRequired;
        private string _SESNumber;
        private DateTime? _APSubmittedDate;
        private string _APSubmittedByUserID;
        private string _Status;
        private DateTime? _InvoiceDate;
        private bool? _NonContractingStatus;
        private string _InvoiceType;

        #endregion Fields

        #region Constructors (1)

        protected InvoiceMaster_SMO_properties()
        {
        }

        #endregion Constructors

        #region Properties (18)

        public int? InvoiceMasterID
        {
            get
            {
                return _InvoiceMasterID;
            }
            set
            {
                _InvoiceMasterID = value;
            }
        }

        public int? IAProcID
        {
            get
            {
                return _IAProcID;
            }
            set
            {
                _IAProcID = value;
            }
        }

        public string DocumentNo
        {
            get
            {
                return _DocumentNo;
            }
            set
            {
                _DocumentNo = value;
            }
        }

        public string InvoiceNo
        {
            get
            {
                return _InvoiceNo;
            }
            set
            {
                _InvoiceNo = value;
            }
        }

        public double? InvoiceAmount
        {
            get
            {
                return _InvoiceAmount;
            }
            set
            {
                _InvoiceAmount = value;
            }
        }

        public string VendorNo
        {
            get
            {
                return _VendorNo;
            }
            set
            {
                _VendorNo = value;
            }
        }

        public string VendorName
        {
            get
            {
                return _VendorName;
            }
            set
            {
                _VendorName = value;
            }
        }

        public string ContractNo
        {
            get
            {
                return _ContractNo;
            }
            set
            {
                _ContractNo = value;
            }
        }

        public string Period
        {
            get
            {
                return _Period;
            }
            set
            {
                _Period = value;
            }
        }

        public string Project
        {
            get
            {
                return _Project;
            }
            set
            {
                _Project = value;
            }
        }

        public DateTime? PaymentDueBy
        {
            get
            {
                return _PaymentDueBy;
            }
            set
            {
                _PaymentDueBy = value;
            }
        }

        public string PostedParkedBy
        {
            get
            {
                return _PostedParkedBy;
            }
            set
            {
                _PostedParkedBy = value;
            }
        }

        public int? CATTThreshold
        {
            get
            {
                return _CATTThreshold;
            }
            set
            {
                _CATTThreshold = value;
            }
        }

        public bool? CATTApprovalRequired
        {
            get
            {
                return _CATTApprovalRequired;
            }
            set
            {
                _CATTApprovalRequired = value;
            }
        }

        public string SESNumber
        {
            get
            {
                return _SESNumber;
            }
            set
            {
                _SESNumber = value;
            }
        }

        public DateTime? APSubmittedDate
        {
            get
            {
                return _APSubmittedDate;
            }
            set
            {
                _APSubmittedDate = value;
            }
        }

        public string APSubmittedByUserID
        {
            get
            {
                return _APSubmittedByUserID;
            }
            set
            {
                _APSubmittedByUserID = value;
            }
        }

        public string Status
        {
            get
            {
                return _Status;
            }
            set
            {
                _Status = value;
            }
        }

        public string DocumentType 
        { get; set; }

        public DateTime? InvoiceDate
            {
            get
                {
                return _InvoiceDate;
                }
            set
                {
                _InvoiceDate = value;
                }
            }

        public bool? NonContractingStatus
            {
            get
                {
                return _NonContractingStatus;
                }
            set
                {
                _NonContractingStatus = value;
                }
            }

        public string InvoiceType
        { get; set; }


        #endregion Properties

        #region Methods (19)

        // Protected Methods (19) 
        protected InvoiceMaster_SMO_properties GetPropertiesObject()
        {
            return new InvoiceMaster_SMO_properties();
        }

        protected static int? SetProperty_InvoiceMasterID(string InvoiceMasterID)
        {
            if (InvoiceMasterID == null)
            {
                return null;
            }


            if (InvoiceMasterID == string.Empty)
            {
                return null;
            }

            return int.Parse(InvoiceMasterID);
        }

        protected static int? SetProperty_IAProcID(string IAProcID)
        {
            if (IAProcID == null)
            {
                return null;
            }


            if (IAProcID == string.Empty)
            {
                return null;
            }

            return int.Parse(IAProcID);
        }

        protected static string SetProperty_DocumentNo(string DocumentNo)
        {
            if (DocumentNo == null)
            {
                return null;
            }


            if (DocumentNo == string.Empty)
            {
                return null;
            }

            return DocumentNo;
        }

        protected static string SetProperty_InvoiceNo(string InvoiceNo)
        {
            if (InvoiceNo == null)
            {
                return null;
            }


            if (InvoiceNo == string.Empty)
            {
                return null;
            }

            return InvoiceNo;
        }

        protected static double? SetProperty_InvoiceAmount(string InvoiceAmount)
        {
            if (InvoiceAmount == null)
            {
                return null;
            }


            if (InvoiceAmount == string.Empty)
            {
                return null;
            }

            return double.Parse(InvoiceAmount);
        }

        protected static string SetProperty_VendorNo(string VendorNo)
        {
            if (VendorNo == null)
            {
                return null;
            }


            if (VendorNo == string.Empty)
            {
                return null;
            }

            return VendorNo;
        }

        protected static string SetProperty_VendorName(string VendorName)
        {
            if (VendorName == null)
            {
                return null;
            }


            if (VendorName == string.Empty)
            {
                return null;
            }

            return VendorName;
        }

        protected static string SetProperty_ContractNo(string ContractNo)
        {
            if (ContractNo == null)
            {
                return null;
            }


            if (ContractNo == string.Empty)
            {
                return null;
            }

            return ContractNo;
        }

        protected static string SetProperty_Period(string Period)
        {
            if (Period == null)
            {
                return null;
            }


            if (Period == string.Empty)
            {
                return null;
            }

            return Period;
        }

        protected static string SetProperty_Project(string Project)
        {
            if (Project == null)
            {
                return null;
            }


            if (Project == string.Empty)
            {
                return null;
            }

            return Project;
        }

        protected static DateTime? SetProperty_PaymentDueBy(string PaymentDueBy)
        {
            if (PaymentDueBy == null)
            {
                return null;
            }


            if (PaymentDueBy == string.Empty)
            {
                return null;
            }

            return Convert.ToDateTime(PaymentDueBy);
        }

        protected static string SetProperty_PostedParkedBy(string PostedParkedBy)
        {
            if (PostedParkedBy == null)
            {
                return null;
            }


            if (PostedParkedBy == string.Empty)
            {
                return null;
            }

            return PostedParkedBy;
        }

        protected static int? SetProperty_CATTThreshold(string CATTThreshold)
        {
            if (CATTThreshold == null)
            {
                return null;
            }


            if (CATTThreshold == string.Empty)
            {
                return null;
            }

            return int.Parse(CATTThreshold);
        }

        protected static bool? SetProperty_CATTApprovalRequired(string CATTApprovalRequired)
        {
            if (CATTApprovalRequired == null)
            {
                return null;
            }


            if (CATTApprovalRequired == string.Empty)
            {
                return null;
            }

            return bool.Parse(CATTApprovalRequired);
        }

        protected static string SetProperty_SESNumber(string SESNumber)
        {
            if (SESNumber == null)
            {
                return null;
            }


            if (SESNumber == string.Empty)
            {
                return null;
            }

            return SESNumber;
        }

        protected static DateTime? SetProperty_APSubmittedDate(string APSubmittedDate)
        {
            if (APSubmittedDate == null)
            {
                return null;
            }


            if (APSubmittedDate == string.Empty)
            {
                return null;
            }

            return Convert.ToDateTime(APSubmittedDate);
        }

        protected static string SetProperty_APSubmittedByUserID(string APSubmittedByUserID)
        {
            if (APSubmittedByUserID == null)
            {
                return null;
            }


            if (APSubmittedByUserID == string.Empty)
            {
                return null;
            }

            return APSubmittedByUserID;
        }

        protected static string SetProperty_Status(string Status)
        {
            if (Status == null)
            {
                return null;
            }


            if (Status == string.Empty)
            {
                return null;
            }

            return Status;
        }

        protected static string SetProperty_DocumentType(string DocumentType)
            {
            if (DocumentType == null)
                {
                return null;
                }


            if (DocumentType == string.Empty)
                {
                return null;
                }

            return DocumentType;
            }

        protected static DateTime? SetProperty_InvoiceDate(string InvoiceDate)
            {
            if (InvoiceDate == null)
                {
                return null;
                }


            if (InvoiceDate == string.Empty)
                {
                return null;
                }

            return Convert.ToDateTime(InvoiceDate);
            }

        protected static bool? SetProperty_NonContractingStatus(string NonContractingStatus)
            {
            if (NonContractingStatus == null)
                {
                return null;
                }


            if (NonContractingStatus == string.Empty)
                {
                return null;
                }

            return bool.Parse(NonContractingStatus);
            }

        protected static string SetProperty_InvoiceType(string InvoiceType)
            {
            if (InvoiceType == null)
                {
                return null;
                }


            if (InvoiceType == string.Empty)
                {
                return null;
                }

            return InvoiceType;
            }

        #endregion Methods

    }

    #region Object Classes

    public abstract class NamedObject
    {

        #region Fields (3)

        private string _name;
        private string _value;
        protected const string SCNULL = "scnull";

        #endregion Fields

        #region Constructors (2)

        public NamedObject(string name, string value)
        {
            _name = name;
            _value = value;
        }

        public NamedObject(string inputValue)
        {
            this.FromValue(inputValue);
        }

        #endregion Constructors

        #region Properties (2)

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        #endregion Properties

        #region Methods (3)

        // Public Methods (3) 

        public abstract void FromValue(string inputValue);

        public override string ToString()
        {
            return ToValue();
        }

        public abstract string ToValue();

        #endregion Methods

    }

    public class ImageObject : NamedObject
    {

        #region Constructors (2)

        public ImageObject(string name, string value)
            : base(name, value)
        {
        }

        public ImageObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string imageNameValue = xNav.SelectSingleNode("image/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("image/content").InnerXml;
                    if (imageNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = imageNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<image>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</image>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class FileObject : NamedObject
    {

        #region Constructors (2)

        public FileObject(string name, string value)
            : base(name, value)
        {
        }

        public FileObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string fileNameValue = xNav.SelectSingleNode("file/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("file/content").InnerXml;
                    if (fileNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = fileNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<file>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</file>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class HyperLinkObject : NamedObject
    {

        #region Constructors (2)

        public HyperLinkObject(string name, string value)
            : base(name, value)
        {
        }

        public HyperLinkObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 

        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string hyperLinkNameValue = xNav.SelectSingleNode("hyperlink/display").InnerXml;
                    string contentValue = xNav.SelectSingleNode("hyperlink/link").InnerXml;
                    if (hyperLinkNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = hyperLinkNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<hyperlink>");
            if (this.Name == null)
            {
                sb.Append("<link/>");
            }
            else
            {
                sb.Append("<link>");
                sb.Append(this.Name);
                sb.Append("</link>");
            }
            if (this.Value == null)
            {
                sb.Append("<display/>");
            }
            else
            {
                sb.Append("<display>");
                sb.Append(this.Value);
                sb.Append("</display>");
            }
            sb.Append("</hyperlink>");
            return sb.ToString();
        }

        #endregion Methods

    }

    #endregion
}
